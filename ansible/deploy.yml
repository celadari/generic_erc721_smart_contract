# Copyright 2019 celadari. All rights reserved. MIT license.
---
- name: Deploy smart contract and provision database
  hosts: localhost
  gather_facts: yes
  connection: local
  vars:
    - env: dev
    - nft_path_to_images_dir: "./data/{{ env }}/tokens/images/"
    - nft_path_to_jsons_dir: "./data/{{ env }}/tokens/jsons/"
    - smart_contract_path_to_json: "./data/{{ env }}/smart_contract/attributes.json"
    - smart_contract_path_to_image: "./data/{{ env }}/smart_contract/image.jpeg"
    - unrevealed_token_path_to_json: "./data/{{ env }}/unrevealed_token/attributes.json"
    - unrevealed_token_path_to_image: "./data/{{ env }}/unrevealed_token/image.jpeg"
  vars_files:
    - "./vars/{{ env }}/vars.yml"
    - "./vars/{{ env }}/vault"
  environment:
    DB_HOST: "{{ db_host }}"
    DB_DATABASE: "{{ db_database }}"
    DB_USER: "{{ db_user }}"
    DB_PASSWORD: "{{ db_password }}"
    DB_PORT: "{{ db_port }}"
    DB_DIALECT: "postgres"
    NFT_STORAGE_API_KEY: "{{ nft_storage_api_key }}"
    SMART_CONTRACT_EXTERNAL_URL: "{{ smart_contract_external_url }}"
    SMART_CONTRACT_FEE_RECIPIENT_ADDRESS: "{{ smart_contract_fee_recipient_address }}"
    SMART_CONTRACT_TOKENS_NB: "{{ nb_tokens }}"
    BLOCKCHAIN_HOST: "{{ blockchain_host }}"
    BLOCKCHAIN_PORT: "{{ blockchain_port_outside_container }}"
    BLOCKCHAIN_NETWORK_ID: "{{ blockchain_network_id }}"
  pre_tasks:
    - name: Install python packages
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
      with_items:
        - psycopg2-binary
    - name: "Install nodejs packages"
      community.general.npm:
        path: "./"
  tasks:
    - name: Init tables in database
      shell: "node services/db"
      args:
        chdir: "{{ playbook_dir }}/.."

    # Table 'pre_non_fungible_tokens'
    - name: Check if 'pre_non_fungible_tokens' table is empty or not
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT EXISTS(SELECT * FROM pre_non_fungible_tokens);"
      register: does_exist_pre_non_fungible_tokens
    - name: Set fact table_pre_non_fungible_tokens_is_empty
      ansible.builtin.set_fact:
        table_pre_non_fungible_tokens_is_empty: "{{ not does_exist_pre_non_fungible_tokens['query_result'][0]['exists'] }}"
    - name: Populate database 'pre_non_fungible_tokens'
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "INSERT INTO pre_non_fungible_tokens(image_filename, json_filename) SELECT CONCAT('image_', generate_series, '.jpeg') AS image, CONCAT('attributes_', generate_series, '.json') FROM GENERATE_SERIES(0, {{ nb_tokens - 1 }});"
      when: table_pre_non_fungible_tokens_is_empty is true

    # Upload token's jsons and images and save uris into table 'non_fungible_tokens'
    - name: Check if 'non_fungible_tokens' table is empty or not
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT EXISTS(SELECT * FROM non_fungible_tokens);"
      register: does_exist_non_fungible_tokens
    - name: Set fact table_non_fungible_tokens_is_empty
      ansible.builtin.set_fact:
        table_non_fungible_tokens_is_empty: "{{ not does_exist_non_fungible_tokens['query_result'][0]['exists'] }}"
    - name: Uploads nft jsons and images to IPFS and saves uris into database 'non_fungible_tokens'
      command: "node scripts/stages/deploy/uploadNonFungibleTokenJsons.js --jsonDir={{ nft_path_to_jsons_dir }} --imageDir={{ nft_path_to_images_dir }}"
      args:
        chdir: "{{ playbook_dir }}/.."
      when: table_non_fungible_tokens_is_empty is true

    # Compute and save merkle tree root
    - name: Check if 'merkle_tree_proofs' table is empty or not
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT EXISTS(SELECT proof FROM merkle_tree_proofs);"
      register: does_exist_merkle_tree_proofs
    - name: Set fact table_merkle_trees_is_empty
      ansible.builtin.set_fact:
        table_merkle_tree_proofs_is_empty: "{{ not does_exist_merkle_tree_proofs['query_result'][0]['exists'] }}"
    - name: Compute and save merkle tree proof of tokens uris
      command: "node scripts/stages/deploy/computeAndSaveMerkleTree.js"
      args:
        chdir: "{{ playbook_dir }}/.."
      when: table_merkle_tree_proofs_is_empty is true
    - name: Retrieve merkle tree root hash
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT proof[1] AS root_hash FROM merkle_tree_proofs WHERE token_id = -1;"
      register: merkle_tree_root_query
    - name: Set fact merkle_tree_root
      ansible.builtin.set_fact:
        merkle_tree_root: "{{ merkle_tree_root_query['query_result'][0]['root_hash'] }}"

    # Upload smart contract json and image
    - name: Check if 'smart_contracts' table is empty or not
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT EXISTS(SELECT * FROM smart_contracts);"
      register: does_exist_smart_contracts
    - name: Set fact table_smart_contracts_is_empty
      ansible.builtin.set_fact:
        table_smart_contracts_is_empty: "{{ not does_exist_smart_contracts['query_result'][0]['exists'] }}"
    - name: Upload Smart contract Json description
      command: "node scripts/stages/deploy/uploadSmartContractJson.js --jsonPath={{smart_contract_path_to_json}} --imagePath={{smart_contract_path_to_image}}"
      args:
        chdir: "{{ playbook_dir }}/.."
      when: table_smart_contracts_is_empty is true
    - name: Retrieve smart contract uri
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT json_uri FROM smart_contracts;"
      register: smart_contract_json_uri_query
    - name: Set fact smart_contract_json_uri
      ansible.builtin.set_fact:
        smart_contract_json_uri: "{{ smart_contract_json_uri_query['query_result'][0]['json_uri'] }}"

    # Upload unrevealed json and image
    - name: Check if 'unrevealed_tokens' table is empty or not
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT EXISTS(SELECT * FROM unrevealed_tokens);"
      register: does_exist_unrevealed_tokens
    - name: Set fact table_unrevealed_tokens_is_empty
      ansible.builtin.set_fact:
        table_unrevealed_tokens_is_empty: "{{ not does_exist_unrevealed_tokens['query_result'][0]['exists'] }}"
    - name: Uploads the json and images of an unrevealed token.
      command: "node scripts/stages/deploy/uploadUnrevealedJson.js --jsonPath={{unrevealed_token_path_to_json}} --imagePath={{unrevealed_token_path_to_image}}"
      args:
        chdir: "{{ playbook_dir }}/.."
      when: table_unrevealed_tokens_is_empty is true
    - name: Retrieve unrevealed token uri
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT json_uri FROM unrevealed_tokens;"
      register: unrevealed_token_json_uri_query
    - name: Set fact unrevealed_token_json_uri
      ansible.builtin.set_fact:
        unrevealed_token_json_uri: "{{ unrevealed_token_json_uri_query['query_result'][0]['json_uri'] }}"

    # Start a ganache node in background
    - name: Execute ganache in background (dev environment) only
      shell: "docker start ganache_instance || docker run --name ganache_instance --detach --publish {{ blockchain_port_outside_container }}:{{ blockchain_port }} trufflesuite/ganache-cli:latest --gasLimit 0x4C4B400 --chainId {{ blockchain_chain_id }} --networkId {{ blockchain_network_id }} --port {{ blockchain_port }} --mnemonic '{{ smart_contract_owner_key_mnemonic }}' --debug"
      when: env == "dev"

    # Deploy smart contract
    - name: Check if 'smart_contracts' table column 'address' is provided
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT address FROM smart_contracts;"
      register: smart_contracts_address_before_update_query
    - name: Set fact smart_contracts_address_before_update
      ansible.builtin.set_fact:
        smart_contracts_address_before_update: "{{ smart_contracts_address_before_update_query['query_result'][0]['address'] }}"
    - name: Deploy smart contract
      command: "npx truffle migrate --name='{{smart_contract_name}}' --symbol={{smart_contract_symbol}} --publicSaleMinPrice={{smart_contract_public_price}} --network={{blockchain_network}} --domainName='{{smart_contract_domain_name}}' --domainVersion={{smart_contract_domain_version}} --withdrawAddress={{smart_contract_withdraw_address}} --smartContractJsonUri={{smart_contract_json_uri}} --merkleTreeRoot={{merkle_tree_root}} --maxIndexTokens={{nb_tokens-1}} --nbTokensPreSaved={{nb_tokens_pre_saved}}"
      args:
        chdir: "{{ playbook_dir }}/.."
      register: log_deployment_smart_contract
      when: smart_contracts_address_before_update == ""
      environment:
        PROVIDER_MNEMONIC_PHRASE: "{{ smart_contract_owner_key_mnemonic }}"
    - name: Print logs of smart contract deployment
      ansible.builtin.debug:
        var: log_deployment_smart_contract
    - name: Retrieve 'smart_contract_address'
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT address FROM smart_contracts;"
      register: smart_contracts_address_query
    - name: Set fact smart_contracts_address
      ansible.builtin.set_fact:
        smart_contracts_address: "{{ smart_contracts_address_query['query_result'][0]['address'] }}"

    # Compute and save uri voucher unrevealed voucher
    - name: Check if 'unrevealed_tokens' table column 'signature' is provided
      postgresql_query:
        login_host: "{{ db_host }}"
        db: "{{ db_database }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
        query: "SELECT signature FROM unrevealed_tokens;"
      register: unrevealed_tokens_signature_query
    - name: Set fact unrevealed_tokens_signature
      ansible.builtin.set_fact:
        unrevealed_tokens_signature: "{{ unrevealed_tokens_signature_query['query_result'][0]['signature'] }}"
    - name: Compute and save unrevealed token voucher
      command: "npx truffle exec --network={{blockchain_network}} --jsonUri={{unrevealed_token_json_uri}} --signers={{smart_contract_mint_signer_accounts}} --signerIndex=0 --smartContractAddress={{smart_contracts_address}} --domainName='{{smart_contract_domain_name}}' --domainVersion={{smart_contract_domain_version}} scripts/stages/deploy/computeAndSaveUnrevealedTokenVoucher.js"
      args:
        chdir: "{{ playbook_dir }}/.."
      when: unrevealed_tokens_signature == ""
      environment:
        PROVIDER_MNEMONIC_PHRASE: "{{ smart_contract_mint_signer_key_mnemonic }}"

    # Grant role permissions
    - name: Grant admin role
      command: "npx truffle exec --network={{blockchain_network}} --role=ADMIN_ROLE --accounts={{smart_contract_admin_accounts}} --froms={{smart_contract_owner_address}} --fromIndex=0 --smartContractAddress={{smart_contracts_address}} scripts/stages/deploy/sendGrantRole.js"
      args:
        chdir: "{{ playbook_dir }}/.."
      environment:
        PROVIDER_MNEMONIC_PHRASE: "{{ smart_contract_owner_key_mnemonic }}"
    - name: Grant mint_signer role
      command: "npx truffle exec --network={{blockchain_network}} --role=MINT_SIGNER_ROLE --accounts={{smart_contract_mint_signer_accounts}} --froms={{smart_contract_admin_accounts}} --fromIndex=0 --smartContractAddress={{smart_contracts_address}} scripts/stages/deploy/sendGrantRole.js"
      args:
        chdir: "{{ playbook_dir }}/.."
      environment:
        PROVIDER_MNEMONIC_PHRASE: "{{ smart_contract_admin_key_mnemonic }}"
    - name: Grant pauser role
      command: "npx truffle exec --network={{blockchain_network}} --role=PAUSER_ROLE --accounts={{smart_contract_pauser_accounts}} --froms={{smart_contract_admin_accounts}} --fromIndex=0 --smartContractAddress={{smart_contracts_address}} scripts/stages/deploy/sendGrantRole.js"
      args:
        chdir: "{{ playbook_dir }}/.."
      environment:
        PROVIDER_MNEMONIC_PHRASE: "{{ smart_contract_admin_key_mnemonic }}"